using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Parkla.Core.DTOs;
using Parkla.CollectorService.Library;
using Parkla.CollectorService.Exporters;
using Parkla.CollectorService.Options;
using Parkla.CollectorService.Handlers;
using System.Text.Json;

namespace Parkla.Web.Controllers;

public class HttpReceiverController : ControllerBase
{
    private readonly IOptionsMonitor<CollectorOptions> _options;
    private readonly ExportManager _exportManager;
    private readonly ILogger<HttpReceiverController> _logger;
    
    public HttpReceiverController(
        IOptionsMonitor<CollectorOptions> options,
        ILogger<HttpReceiverController> logger,
        ExportManager exportManager)
    {
        _options = options;
        _exportManager = exportManager;
        _logger = logger;
    }

    public void Receive () {
        var path = HttpContext.Request.Path.Value;
        var pipelines = _options.CurrentValue.Pipelines;

        foreach(var pipeline in pipelines) {
            var httpReceivers = pipeline.Receivers.Where(x => {
                var isHttpReceiver = x.Type == ReceiverType.HTTP;
                if(!isHttpReceiver) return false;
                return string.Compare(
                    ((HttpReceiver)x).Endpoint,
                    path,
                    StringComparison.OrdinalIgnoreCase
                ) == 0;
            }).ToArray();
            if(httpReceivers.Length == 0) continue;

            _logger.LogInformation("Path '{}' has {} http receiver(s)", path, httpReceivers.Length);

            var exporters = pipeline.Exporters;
            var handlerResults = ExecuteHandlers(httpReceivers);

            _logger.LogInformation("{} results generated by handlers and will be exported by {} exporters", handlerResults.Count, exporters.Length);
            foreach(var result in handlerResults)
                _logger.LogInformation("{} is exporting", JsonSerializer.Serialize(result));

            foreach(var exporter in exporters) {
                _exportManager.Export(exporter, handlerResults);
            }

        }
    }
    
    private List<ParkSpaceStatusDto> ExecuteHandlers(Receiver[] httpReceivers) {
        var results = new List<ParkSpaceStatusDto>();
        
        foreach(HttpReceiver httpReceiver in httpReceivers) {
            _logger.LogInformation("Executing handler with name '{}'",httpReceiver.Handler.Name);
            var handler = (HandlerBase?)HandlerBase.GetInstance(httpReceiver.Handler);
            

            if(handler == null) {
                _logger.LogWarning("Handler could not instantiated. DefaultHttpHandler will handle the request");
                handler = HandlerBase.GetInstance<DefaultHttpHandler>()!;
            }

            try {
                var handlerResult = handler.Handle(ReceiverType.HTTP, new HttpReceiverParam{
                    httpContext = HttpContext
                });

                if(handlerResult != null)
                    results.Add(handlerResult);
            }
            catch(Exception e) {
                _logger.LogError(e, "An error occured while handling the request. The result is not generated so it will not be exported.");
            }
        }
        
        return results;
    }
    
}
