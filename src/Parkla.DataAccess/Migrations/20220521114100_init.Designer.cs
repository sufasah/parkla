// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Parkla.DataAccess.Contexts;

#nullable disable

namespace Parkla.DataAccess.Migrations
{
    [DbContext(typeof(ParklaDbContext))]
    [Migration("20220521114100_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Parkla.DataAccess.testef.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_districts_city_id");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Park", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float?>("AvaragePrice")
                        .HasColumnType("real")
                        .HasColumnName("avarage_price");

                    b.Property<int>("EmptySpace")
                        .HasColumnType("integer")
                        .HasColumnName("empty_space");

                    b.Property<string[]>("Extras")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("extras");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("location");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<float?>("MaxPrice")
                        .HasColumnType("real")
                        .HasColumnName("max_price");

                    b.Property<float?>("MinPrice")
                        .HasColumnType("real")
                        .HasColumnName("min_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("OccupiedSpace")
                        .HasColumnType("integer")
                        .HasColumnName("occupied_space");

                    b.Property<int>("ReservedSpace")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_space");

                    b.Property<DateTime?>("StatusUpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_update_time");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_parks_user_id");

                    b.ToTable("parks", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ParkArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<float?>("AvaragePrice")
                        .HasColumnType("real")
                        .HasColumnName("avarage_price");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<int>("EmptySpace")
                        .HasColumnType("integer")
                        .HasColumnName("empty_space");

                    b.Property<float?>("MaxPrice")
                        .HasColumnType("real")
                        .HasColumnName("max_price");

                    b.Property<float?>("MinPrice")
                        .HasColumnType("real")
                        .HasColumnName("min_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("OccupiedSpace")
                        .HasColumnType("integer")
                        .HasColumnName("occupied_space");

                    b.Property<Guid>("ParkId")
                        .HasColumnType("uuid")
                        .HasColumnName("park_id");

                    b.Property<bool>("ReservationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("reservations_enabled");

                    b.Property<int>("ReservedSpace")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_space");

                    b.Property<DateTime?>("StatusUpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_update_time");

                    b.Property<string>("TemplateImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("template_image");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParkId" }, "IX_park_areas_park_id");

                    b.ToTable("park_areas", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ParkSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int?>("RealSpaceId")
                        .HasColumnType("integer")
                        .HasColumnName("real_space_id");

                    b.Property<string>("SpacePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("space_path");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("3");

                    b.Property<DateTime?>("StatusUpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_update_time");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "IX_park_spaces_area_id");

                    b.ToTable("park_spaces", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Pricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "IX_pricings_area_id");

                    b.ToTable("pricings", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.RealParkSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<Guid>("ParkId")
                        .HasColumnType("uuid")
                        .HasColumnName("park_id");

                    b.Property<int?>("SpaceId")
                        .HasColumnType("integer")
                        .HasColumnName("space_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("3");

                    b.Property<DateTime?>("StatusUpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_update_time");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParkId" }, "IX_real_park_spaces_park_id");

                    b.HasIndex(new[] { "SpaceId" }, "IX_real_park_spaces_space_id")
                        .IsUnique();

                    b.ToTable("real_park_spaces", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ReceivedSpaceStatuss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<int?>("RealSpaceId")
                        .HasColumnType("integer")
                        .HasColumnName("real_space_id");

                    b.Property<int?>("SpaceId")
                        .HasColumnType("integer")
                        .HasColumnName("space_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("3");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RealSpaceId" }, "IX_received_space_statusses_real_space_id");

                    b.HasIndex(new[] { "SpaceId" }, "IX_received_space_statusses_space_id");

                    b.ToTable("received_space_statusses", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("PricingId")
                        .HasColumnType("integer")
                        .HasColumnName("pricing_id");

                    b.Property<int>("SpaceId")
                        .HasColumnType("integer")
                        .HasColumnName("space_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PricingId" }, "IX_reservations_pricing_id");

                    b.HasIndex(new[] { "SpaceId" }, "IX_reservations_space_id");

                    b.HasIndex(new[] { "UserId" }, "IX_reservations_user_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("RefreshTokenSignature")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("refresh_token_signature");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("username");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("text")
                        .HasColumnName("verify_code");

                    b.Property<float>("Wallet")
                        .HasColumnType("real")
                        .HasColumnName("wallet");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_users_city_id");

                    b.HasIndex(new[] { "DistrictId" }, "IX_users_district_id");

                    b.HasIndex(new[] { "Username" }, "IX_users_username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.District", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Park", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.User", "User")
                        .WithMany("Parks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ParkArea", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.Park", "Park")
                        .WithMany("ParkAreas")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Park");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ParkSpace", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.ParkArea", "Area")
                        .WithMany("ParkSpaces")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Pricing", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.ParkArea", "Area")
                        .WithMany("Pricings")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.RealParkSpace", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.Park", "Park")
                        .WithMany("RealParkSpaces")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parkla.DataAccess.testef.ParkSpace", "Space")
                        .WithOne("RealParkSpace")
                        .HasForeignKey("Parkla.DataAccess.testef.RealParkSpace", "SpaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Park");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ReceivedSpaceStatuss", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.RealParkSpace", "RealSpace")
                        .WithMany("ReceivedSpaceStatusses")
                        .HasForeignKey("RealSpaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Parkla.DataAccess.testef.ParkSpace", "Space")
                        .WithMany("ReceivedSpaceStatusses")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RealSpace");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Reservation", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.Pricing", "Pricing")
                        .WithMany("Reservations")
                        .HasForeignKey("PricingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parkla.DataAccess.testef.ParkSpace", "Space")
                        .WithMany("Reservations")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parkla.DataAccess.testef.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pricing");

                    b.Navigation("Space");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.User", b =>
                {
                    b.HasOne("Parkla.DataAccess.testef.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Parkla.DataAccess.testef.District", "District")
                        .WithMany("Users")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.City", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.District", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Park", b =>
                {
                    b.Navigation("ParkAreas");

                    b.Navigation("RealParkSpaces");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ParkArea", b =>
                {
                    b.Navigation("ParkSpaces");

                    b.Navigation("Pricings");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.ParkSpace", b =>
                {
                    b.Navigation("RealParkSpace");

                    b.Navigation("ReceivedSpaceStatusses");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.Pricing", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.RealParkSpace", b =>
                {
                    b.Navigation("ReceivedSpaceStatusses");
                });

            modelBuilder.Entity("Parkla.DataAccess.testef.User", b =>
                {
                    b.Navigation("Parks");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
